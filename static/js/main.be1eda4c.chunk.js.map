{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["suffixes","App","useState","text","setText","translated","setTranslated","extreme","setExtreme","extremeTranslation","setExtremeTranslation","className","placeholder","onChange","x","words","split","newWords","newWordsExtreme","i","word","toLowerCase","trim","numL","match","length","newWord","replace","changed","j","endsWith","substring","repeat","join","translate","target","value","type","checked","href","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAGMA,G,MAAW,CAAC,SAAU,QAAS,OAAQ,MAAO,KAAM,MAAO,KAAM,MA6ExDC,MA3Ef,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEuBF,mBAAS,IAFhC,mBAENG,EAFM,KAEMC,EAFN,OAGiBJ,oBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,OAIuCN,mBAAS,IAJhD,mBAINO,EAJM,KAIcC,EAJd,KAuCb,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,YAAb,wCACA,6BACA,8BACEC,YAAY,4CACZC,SAAU,SAACC,GAAD,OAxCA,SAACX,GACjB,IAAIY,EAAkBZ,EAAKa,MAAM,KAC7BC,EAAqB,GACrBC,EAA4B,GAChC,IAAK,IAAIC,KAAKJ,EAAO,CACnB,IAAIK,EAAOL,EAAMI,GAAGE,cAAcC,OAC9BC,GAAQH,EAAKI,MAAM,OAAS,IAAIC,OAChCC,EAAkBN,EACtB,GAAIG,EAAM,CACRG,EAAUN,EAAKO,QAAQ,KAAM,IAC7B,IAAIC,GAAmB,EACvB,IAAK,IAAIC,KAAK7B,EACZ,GAAIoB,EAAKU,SAAS9B,EAAS6B,IAAK,CAC9BH,EAAUA,EAAQK,UAAU,EAAGX,EAAKK,OAAOzB,EAAS6B,GAAGJ,OAAOF,GAC9DG,GAAW,IAAIM,OAAOT,GACtBG,GAAW1B,EAAS6B,GACpBD,GAAU,EACV,MAGCA,IAASF,GAAW,IAAIM,OAAOT,IAEtCN,EAASE,GAAKO,EACdR,EAAgBC,GAAKO,EAChBH,GAAoB,MAAZG,GAA+B,KAAZA,IAC9BR,EAAgBC,GAAKO,EAAU,KAGnCtB,EAAQD,GACRG,EAAcW,EAASgB,KAAK,MAC5BvB,EAAsBQ,EAAgBe,KAAK,MAUpBC,CAAUpB,EAAEqB,OAAOC,QACpCA,MAAOjC,IAET,6BAAK,6BACJE,EAAWoB,OAAS,GAAK,uBAAGd,UAAU,YAAb,aACzBJ,GAAW,uBAAGI,UAAU,eAAeF,IACtCF,GAAW,2BAAIF,GACjB,6BACCA,EAAWoB,QAAU,GACpB,8BACE,+BACE,kEACA,2BACEY,KAAK,WACLC,QAAS/B,EACTM,SAAU,WAAOL,GAAYD,SAOvC,4BAAQI,UAAU,UAAlB,WACU,uBAAG4B,KAAK,8BAAR,aC9DIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be1eda4c.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nconst suffixes = ['erings', 'ering', 'ings', 'ing', 'in', 'ers', 'er', 's']\n\nfunction App() {\n  const [text, setText] = useState(\"\")\n  const [translated, setTranslated] = useState(\"\")\n  const [extreme, setExtreme] = useState(false)\n  const [extremeTranslation, setExtremeTranslation] = useState(\"\")\n\n  const translate = (text: string) => {\n    let words: string[] = text.split(\" \")\n    let newWords: string[] = []\n    let newWordsExtreme: string[] = []\n    for (let i in words) {\n      let word = words[i].toLowerCase().trim()\n      let numL = (word.match(/l/g) || []).length \n      let newWord: string = word\n      if (numL) {\n        newWord = word.replace(/l/g, \"\")\n        let changed: boolean = false\n        for (let j in suffixes) {\n          if (word.endsWith(suffixes[j])) {\n            newWord = newWord.substring(0, word.length-suffixes[j].length-numL) \n            newWord += \"l\".repeat(numL)\n            newWord += suffixes[j]\n            changed = true\n            break\n          }\n        }\n        if (!changed) newWord += \"l\".repeat(numL)\n      }\n      newWords[i] = newWord\n      newWordsExtreme[i] = newWord\n      if (!numL && newWord !== \" \" && newWord !== \"\") {\n        newWordsExtreme[i] = newWord + 'l'\n      }\n    }\n    setText(text)\n    setTranslated(newWords.join(\" \"))\n    setExtremeTranslation(newWordsExtreme.join(\" \"))\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <i className=\"big-text\">If you can dream it, you can meme it</i>\n        <br/>\n        <textarea \n          placeholder=\"Try typing something with the letter L...\" \n          onChange={(x) => translate(x.target.value)} \n          value={text}\n        />\n        <br/><br/>\n        {translated.length > 0 && <i className=\"big-text\">Behold...</i>}\n        {extreme && <p className=\"apply-shake\">{extremeTranslation}</p>}\n        {!extreme && <p>{translated}</p>}\n        <br/>\n        {translated.length >= 8 && \n          <span>\n            <label>\n              <i>Extreme Mode (use at your own risk)</i>\n              <input \n                type=\"checkbox\" \n                checked={extreme}\n                onChange={() => {setExtreme(!extreme)}}\n                />\n            </label>\n          </span>\n        }\n      </div>\n      \n      <footer className=\"footer\">\n        Made by <a href=\"https://twitter.com/c0rv0s\">Nathan</a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}